-- Task 1
-- 
-- Write a SELECT statement that will return the custid, companyname, contactname, address, city, country, and phone columns from the Sales.Customers table. Filter the results to include only the customers from the country Brazil.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 52 - Lab Exercise  Task 1 Result.txt.
---------------------------------------------------------------------
SELECT
	c.custid, c.companyname, c.contactname, c.address, c.city, c.country, c.phone
FROM Sales.Customers AS c
Where c.country = 'Brazil';


---------------------------------------------------------------------
-- Task 2
-- 
-- Write a SELECT statement that will return the custid, companyname, contactname, address, city, country, and phone columns from the Sales.Customers table. Filter the results to include only customers from the countries Brazil, UK, and USA.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 53 - Lab Exercise 1 - Task 2 Result.txt.
---------------------------------------------------------------------
SELECT
	c.custid, c.companyname, c.contactname, c.address, c.city, c.country, c.phone
FROM Sales.Customers AS c
--Where c.country = 'Brazil' or c.country = 'UK' or c.country = 'USA' ;
WHERE c.country IN ('UK','USA','Brazil');

---------------------------------------------------------------------
-- Task 3
-- 
-- Write a SELECT statement that will return the custid, companyname, contactname, address, city, country, and phone columns from the Sales.Customers table. Filter the results to include only the customers with a contact name starting with the letter A.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 54 - Lab Exercise 1 - Task 3 Result.txt.
---------------------------------------------------------------------
SELECT
	c.custid, c.companyname, c.contactname, c.address, c.city, c.country, c.phone
FROM Sales.Customers AS c
Where c.contactname like 'A%' ;


---------------------------------------------------------------------
-- Task 4
-- 
-- The IT department has written a T-SQL statement that retrieves the custid and companyname columns from the Sales.Customers table and the orderid column from the Sales.Orders table.
--
-- Execute the query. Notice two things. First, the query retrieves all the rows from the Sales.Customers table. Second, there is a comparison operator in the ON clause specifying that the city column should be equal to the value “Paris”.
-- 
-- Copy the provided T-SQL statement and modify it to have a comparison operator for the city column in the WHERE clause. Execute the query. 
-- 
-- Compare the results that you got with the desired results shown in the file 55 - Lab Exercise 1 - Task 4 Result.txt. 
--
-- Is the result the same as in the first T-SQL statement? Why? What is the difference between specifying the predicate in the ON clause and in the WHERE clause?
---------------------------------------------------------------------

SELECT
	c.custid, c.companyname, o.orderid
FROM Sales.Customers AS c
LEFT OUTER JOIN Sales.Orders AS o ON c.custid = o.custid 
Where c.city = 'Paris';


---------------------------------------------------------------------
-- Task 5
-- 
-- Write a T-SQL statement to retrieve customers from the Sales.Customers table that do not have matching orders in the Sales.Orders table. Matching customers with orders is based on a comparison between the customer’s custid value and the order’s custid value. Retrieve the custid and companyname columns from the Sales.Customers table. (Hint: Use a T-SQL statement that is similar to the one in the previous task.)
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 56 - Lab Exercise 1 - Task 5 Result.txt.
---------------------------------------------------------------------
SELECT
	c.custid, c.companyname
FROM Sales.Customers AS c
Left JOIN Sales.Orders AS o ON c.custid = o.custid 
Where o.custid is  null;

-- LAB 06
--
-- Exercise 2
---------------------------------------------------------------------
---------------------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_06_PRJ\10774A_06_PRJ.ssmssln and the T-SQL script 61 - Lab Exercise 2.sql. Ensure that you are connected to the TSQL2012 database.
--
-- Write a SELECT statement to retrieve the custid and contactname columns from the Sales.Customers table and the orderid and orderdate columns from the Sales.Orders table. Filter the results to include only orders placed on or after April, 1 2008 (filter the orderdate column). Then sort the result by orderdate in descending order and custid in ascending order.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 62 - Lab Exercise 2 - Task 1 Result.txt.
---------------------------------------------------------------------
SELECT
	c.custid, c.contactname, o.orderid, o.orderdate
FROM Sales.Customers AS c
lEFT JOIN Sales.Orders AS o ON c.custid = o.custid 
Where o.orderdate >= '20080401' ORDER BY o.orderdate DESC;


---------------------------------------------------------------------
-- Task 2
-- 
-- Execute the query exactly as written inside a query window and observe the result.
--
-- You get an error. What is the error message? Why do you think you got this error? (Tip: Remember the logical processing order of the query.)
--
-- Apply the needed changes to the SELECT statement so that it will run without an error. Test the changes by executing the T-SQL statement.
--
-- Observe and compare the results that you got with the recommended result shown in the file 63 - Lab Exercise 2 - Task 2 Result.txt.
---------------------------------------------------------------------
Select
 e.empid, e.lastname, e.firstname, e.title, e.mgrid,
 m.lastname AS mgrlastname, m.firstname AS mgrfirstname
FROM HR.Employees AS e
INNER JOIN HR.Employees AS m ON e.mgrid = m.empid
WHERE

 m.lastname  = N'Buck';
---------------------------------------------------------------------
-- Task 3
-- 
-- Copy the existing T-SQL statement from task 2 and modify it so that the result will return all employees and be ordered by the manager’s first name. Try first to use the source column name, and then try to use the alias column name.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 64 - Lab Exercise 2 - Task 3 Result.txt.
--
-- Why were you able to use a source column name or an alias column name? 
---------------------------------------------------------------------
SELECT
 e.empid, e.lastname, e.firstname, e.title, e.mgrid,
 m.lastname AS mgrlastname, m.firstname AS mgrfirstname
FROM HR.Employees AS e
LEFT JOIN HR.Employees AS m
 ON e.mgrid = m.empid

order by m.firstname asc

---------------------------------------------------------------------
---------------------------------------------------------------------

SELECT
 e.empid, e.lastname, e.firstname, e.title, e.mgrid,
 m.lastname AS mgrlastname, m.firstname AS mgrfirstname
FROM HR.Employees AS e
LEFT JOIN HR.Employees AS m
 ON e.mgrid = m.empid

order by mgrfirstname asc

-- LAB 06
--
-- Exercise 3
---------------------------------------------------------------------
SELECT TOP 20 orderid, orderdate
From Sales.Orders  Order by orderdate DESC;

---------------------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_06_PRJ\10774A_06_PRJ.ssmssln and the SQL script 71 - Lab Exercise 3.sql. Ensure that you are connected to the TSQL2012 database.
-- 
-- Write a SELECT statement against the Sales.Orders table and retrieve the orderid and orderdate columns. Retrieve the last 20 orders, based on orderdate ordering.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 72 - Lab Exercise 3 - Task 1 Result.txt.
---------------------------------------------------------------------



---------------------------------------------------------------------
-- Task 2
-- 
-- Write a SELECT statement to retrieve the same result as in task 1, but use the OFFSET-FETCH clause.
--
-- Execute the written statement and compare the results that you got with the results from task 1.
---------------------------------------------------------------------
SELECT orderid,orderdate
FROM Sales.Orders
ORDER BY orderdate DESC 
OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY;



---------------------------------------------------------------------
-- Task 3
-- 
-- Write a SELECT statement to retrieve the productname and unitprice columns from the Production.Products table.
--
-- Execute the T-SQL statement and notice the number of the rows returned.
-- 
-- Modify the SELECT statement to include only the top 10 percent of products based on unitprice ordering.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 73 - Lab Exercise 3 - Task 2 Result.txt. Notice the number of rows returned.
--
-- Is it possible to implement this task with the OFFSET-FETCH clause?
---------------------------------------------------------------------

SELECT TOP 10 percent productname,unitprice
From Production.Products  Order by unitprice DESC;
-- LAB 06
--
-- Exercise 4
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_06_PRJ\10774A_06_PRJ.ssmssln and the T-SQL script 81 - Lab Exercise 4.sql. Ensure that you are connected to the TSQL2012 database.
--
-- Write a SELECT statement to retrieve the custid, orderid, and orderdate columns from the Sales.Orders table. Order the rows by orderdate and orderid. Retrieve the first 20 rows.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 82 - Lab Exercise 4 - Task 1 Result.txt.
---------------------------------------------------------------------
SELECT TOP (20) WITH TIES custid, orderid,  orderdate
FROM Sales.Orders
ORDER BY orderdate, orderid DESC;


---------------------------------------------------------------------
-- Task 2
-- 
-- Copy the SELECT statement in task 1 and modify the OFFSET-FETCH clause to skip the first 20 rows and fetch the next 20 rows.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 83 - Lab Exercise 4 - Task 2 Result.txt. 
---------------------------------------------------------------------
SELECT custid, orderid,  orderdate
FROM Sales.Orders
ORDER BY orderdate, orderid DESC OFFSET 20 ROWS FETCH NEXT 20 ROWS ONLY;


---------------------------------------------------------------------
-- Task 3
-- 
-- You are given the parameters @pagenum for requested page number and @pagesize for requested page size. Can you figure out how to write a generic form of the OFFSET-FETCH clause using those parameters? (Do not worry about not being familiar with those parameters yet.)
---------------------------------------------------------------------
SELECT
custid, orderid, orderdate
FROM Sales.Orders
ORDER BY orderdate, orderid
OFFSET (@pagenum - 1) * @pagesize ROWS FETCH NEXT @pagesize ROWS ONLY;
