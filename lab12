 Exercise 1
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_12_PRJ\10774A_12_PRJ.ssmssln and the T-SQL script 51 - Lab Exercise 1.sql. To set your database context to that of the TSQL2012 database, highlight the statement USE TSQL2012; and execute the highlighted code. After executing this statement, the TSQL2012 database should be selected in the Available Databases box. In subsequent exercises, you will simply be instructed to ensure that you are connected to the TSQL2012 database.
--
-- Write a SELECT statement to return the productid and productname columns from the Production.Products table. Filter the results to include only products that have a categoryid value 4.

-- Execute the written statement and compare the results that you got with the desired results shown in the file 52 - Lab Exercise 1 - Task 1 Result.txt. Remember the number of rows in the result.

---------------------------------------------------------------------
SELECT productid, productname 
FROM Production.Products
where categoryid=4


---------------------------------------------------------------------
-- Task 2
-- 
-- Write a SELECT statement to return the productid and productname columns from the Production.Products table. Filter the results to include only products that have a total sales amount of more than $50,000. For the total sales amount, you will need to query the Sales.OrderDetails table and aggregate all order line values (qty * unitprice) for each product.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 53 - Lab Exercise 1 - Task 2 Result.txt. Remember the number of rows in the result.
---------------------------------------------------------------------
SELECT s.productid, s.productname
FROM Production.Products as s join Sales.OrderDetails as p on s.productid=p.productid
GROUP BY s.productid,s.productname
having sum(p.unitprice * p.qty)>50000 
 
 go
---------------------------------------------------------------------
-- Task 3
-- 
-- Write a SELECT statement that uses the UNION operator to retrieve the productid and productname columns from the T-SQL statements in task 1 and task 2.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 54 - Lab Exercise 1 - Task 3_1 Result.txt. 
--
-- What is the total number of rows in the result? If you compare this number with an aggregate value of the number of rows from task 1 and task 2 is there any difference? 
--
-- Copy the T-SQL statement and modify it to use the UNION ALL operator. 
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 55 - Lab Exercise 1 - Task 3_2 Result.txt. 
--
-- What is the total number of rows in the result? What is the difference between the UNION and UNION ALL operators?
---------------------------------------------------------------------
SELECT productid, productname
FROM (select productid, productname 
FROM Production.Products
where categoryid=4) as p union (SELECT s.productid, s.productname from Production.Products as s join Sales.OrderDetails as p on s.productid=p.productid
GROUP BY s.productid,s.productname
having sum(p.unitprice * p.qty)>50000)
order by productid
go
SELECT productid, productname
FROM (select productid, productname 
FROM Production.Products
where categoryid=4) as p union all (SELECT s.productid, s.productname from Production.Products as s join Sales.OrderDetails as p on s.productid=p.productid
GROUP BY s.productid,s.productname
having sum(p.unitprice * p.qty)>50000)
order by productid
go
---------------------------------------------------------------------
-- Task 4
-- 
-- Write a SELECT statement to retrieve the custid and contactname columns from the Sales.Customers table. Display the top 10 customers by sales amount for January 2008 and display the top 10 customers by sales amount for February 2008 (Hint: Write two SELECT statements each joining Sales.Customers and â€‹Sales.OrderValues and use the appropriate set operator.)
--
-- Execute the T-SQL code and compare the results that you got with the desired results shown in the file 56 - Lab Exercise 1 - Task 4 Result.txt. 
---------------------------------------------------------------------
select custid,contactname from 
(SELECT TOP (10) sum(ov.val) as k,c.custid,c.contactname from Sales.Customers as c join Sales.OrderValues as ov on ov.custid=c.custid
where year(ov.orderdate)=2008 and month(ov.orderdate)=1
GROUP BY  c.custid,c.contactname
order by sum(ov.val) DESC)  a
union 
select custid,contactname from
(SELECT TOP (10) sum(ov.val) as k,c.custid,c.contactname from Sales.Customers as c join Sales.OrderValues as ov on ov.custid=c.custid
where year(ov.orderdate)=2008 and month(ov.orderdate)=2
GROUP BY  c.custid,c.contactname 
order by sum(ov.val) DESC) b
order by custid
Go

 Exercise 2
---------------------------------------------------------------------
---------------------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_12_PRJ\10774A_12_PRJ.ssmssln and the T-SQL script 61 - Lab Exercise 2.sql. Ensure that you are connected to the TSQL2012 database.
--
-- Write a SELECT statement to retrieve the productid and productname columns from the Production.Products table. In addition, for each product, retrieve the last two rows from the Sales.OrderDetails table based on orderid number.
--
-- Use the CROSS APPLY operator and a correlated subquery. Order the result by the column productid.
--
-- Execute the written statement and compare the results that you got with the desired results shown in the file 62 - Lab Exercise 2 - Task 1 Result.txt.
---------------------------------------------------------------------
select p.productid,p.productname,k.orderid from Production.Products as p
cross apply 
(select TOP 2 * from sales.OrderDetails as s where p.productid=s.productid order by orderid desc) as k
order by p.productid


---------------------------------------------------------------------
-- Task 2
-- 
-- Execute the provided T-SQL code to create the inline table-valued function fnGetTop3ProductsForCustomer, as you did in the previous module:
--
-- Write a SELECT statement to retrieve the custid and contactname columns from the Sales.Customers table. Use the CROSS APPLY operator with the dbo.fnGetTop3ProductsForCustomer function to retrieve productid, productname, and totalsalesamount columns for each customer.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 63 - Lab Exercise 2 - Task 2 Result.txt. Remember the number of rows in the result.
---------------------------------------------------------------------
IF OBJECT_ID('dbo.fnGetTop3ProductsForCustomer') IS NOT NULL
	DROP FUNCTION dbo.fnGetTop3ProductsForCustomer;

GO

CREATE FUNCTION dbo.fnGetTop3ProductsForCustomer
(@custid AS INT) RETURNS TABLE
AS
RETURN
SELECT TOP(3)
	d.productid, 
	MAX(p.productname) AS productname, 
	SUM(d.qty * d.unitprice) AS totalsalesamount	
FROM Sales.Orders AS o
INNER JOIN Sales.OrderDetails AS d ON d.orderid = o.orderid
INNER JOIN Production.Products AS p ON p.productid = d.productid
WHERE custid = @custid
GROUP BY d.productid
ORDER BY totalsalesamount DESC;

GO
select custid,contactname,p.productid,p.productname,p.totalsalesamount from Sales.Customers as s
cross apply dbo.fnGetTop3ProductsForCustomer(s.custid) as p

---------------------------------------------------------------------
-- Task 3
-- 
-- Copy the T-SQL statement from the previous task and modify it by replacing the CROSS APPLY operator with the OUTER APPLY operator.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 64 - Lab Exercise 2 - Task 3 Result.txt. Notice that you got more rows than in the previous task.
---------------------------------------------------------------------
select custid,contactname,p.productid,p.productname,p.totalsalesamount from Sales.Customers as s
outer apply dbo.fnGetTop3ProductsForCustomer(s.custid) as p


---------------------------------------------------------------------
-- Task 4
--
-- Copy the T-SQL statement from the previous task and modify it by filtering the results to show only customers without products. (Hint: In a WHERE clause, look for any column returned by the inline table-valued function that is NULL.) 
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 65 - Lab Exercise 2 - Task 4 Result.txt. 
--
-- What is the difference between the CROSS APPLY and OUTER APPLY operators?
---------------------------------------------------------------------
select custid,contactname,p.productid,p.productname,p.totalsalesamount from Sales.Customers as s
outer apply dbo.fnGetTop3ProductsForCustomer(s.custid) as p
where p.productid is null


---------------------------------------------------------------------
-- Task 5
-- 
-- Remove the created inline table-valued function by executing the provided T-SQL code:
--
-- Execute this code exactly as written inside a query window.
---------------------------------------------------------------------

IF OBJECT_ID('dbo.fnGetTop3ProductsForCustomer') IS NOT NULL
	DROP FUNCTION dbo.fnGetTop3ProductsForCustomer;


Exercise 3
---------------------------------------------------------------------
----------------------------------------------------------
-- Task 1
-- 
-- Open the project file F:\10774A_Labs\10774A_12_PRJ\10774A_12_PRJ.ssmssln and the T-SQL script 71 - Lab Exercise 3.sql. Ensure that you are connected to the TSQL2012 database.
--
-- Write a SELECT statement to retrieve the custid column from the Sales.Orders table. Filter the results to include only customers that bought more than 20 different products (based on the productid column from the Sales.OrderDetails table).
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 72 - Lab Exercise 3 - Task 1 Result.txt. 
---------------------------------------------------------------------


select custid from Sales.Orders  as o
cross APPLY
(SELECT c.productid
	FROM Sales.OrderDetails AS c
	WHERE o.orderid = c.orderid) AS TopOrders
	group by custid
	having count(productid)>20
	order by custid
	--select custid from Sales.Orders  as o join
--Sales.OrderDetails AS c on o.orderid=c.orderid
	--group by custid
	--having count(productid)>20
	--order by custid

---------------------------------------------------------------------
-- Task 2
-- 
-- Write a SELECT statement to retrieve the custid column from the Sales.Orders table. Filter the results to include only customers from the country USA and exclude all customers from the previous (task 1) result. (Hint: Use the EXCEPT operator and the previous query.)
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 73 - Lab Exercise 3 - Task 2 Result.txt. 
---------------------------------------------------------------------
		select custid from sales.orders
	where shipcountry='USA'
		except
	select custid from Sales.Orders  as o join
Sales.OrderDetails AS c on o.orderid=c.orderid
	group by custid
	having count(productid)>20
			order by custid
---------------------------------------------------------------------
-- Task 3
-- 
-- Write a SELECT statement to retrieve the custid column from the Sales.Orders table. Filter only customers that have a total sales value greater than $10,000. Calculate the sales value using the qty and unitprice columns from the Sales.OrderDetails table.
--
-- Execute the written statement and compare the results that you got with the recommended result shown in the file 73 - Lab Exercise 3 - Task 3 Result.txt.
---------------------------------------------------------------------
select custid from Sales.Orders as o join Sales.OrderDetails as od on o.orderid=od.orderid
group by custid
having sum(od.qty*od.unitprice)>10000



---------------------------------------------------------------------
-- Task 4
-- 
-- Copy the T-SQL statement from task 2. Add the INTERSECT operator at the end of the statement. After the INTERSECT operator, add the T-SQL statement from task 3.
--
-- Execute the T-SQL statement and compare the results that you got with the recommended result shown in the file 74 - Lab Exercise 3 - Task 4 Result.txt. Notice the total number of rows in the result.
--
-- Can you explain in business terms which customers are part of the result? 
---------------------------------------------------------------------
		select custid from sales.orders
	where shipcountry='USA'
		except
	select custid from Sales.Orders  as o join
Sales.OrderDetails AS c on o.orderid=c.orderid
	group by custid
	having count(productid)>20
intersect
select custid from Sales.Orders as o join Sales.OrderDetails as od on o.orderid=od.orderid
group by custid
having sum(od.qty*od.unitprice)>10000
			order by custid
			go
---------------------------------------------------------------------
-- Task 5
-- 
-- Copy the T-SQL statement from the previous task and add parentheses around the first two SELECT statements (from the beginning until the INTERSECT operator).
--
-- Execute the T-SQL statement and compare the results that you got with the recommended result shown in the file 75 - Lab Exercise 3 - Task 5 Result.txt. Notice the total number of rows in the result.
--
-- Is the result different than the result from task 4? Please explain why. 
--
-- What is the precedence among the set operators?
---------------------------------------------------------------------

	(select custid from sales.orders
	where shipcountry='USA'
		except
	select custid from Sales.Orders  as o join
Sales.OrderDetails AS c on o.orderid=c.orderid
	group by custid
	having count(productid)>20)
intersect
select custid from Sales.Orders as o join Sales.OrderDetails as od on o.orderid=od.orderid
group by custid
having sum(od.qty*od.unitprice)>10000
			order by custid
